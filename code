import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
import json
import os
from datetime import datetime

bot = telebot.TeleBot("Tiket")

def load_data():
    if os.path.exists('stories_data.json'):
        with open('stories_data.json', 'r') as f:
            return json.load(f)
    return {'stories': [], 'ratings': {}}

def save_data(data):
    with open('stories_data.json', 'w') as f:
        json.dump(data, f)

@bot.message_handler(commands=['start'])
def start(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é', 'üìñ –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏')
    markup.row('‚≠ê –ú–æ–∏ –∏—Å—Ç–æ—Ä–∏–∏')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ['üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é', 'üìñ –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏', '‚≠ê –ú–æ–∏ –∏—Å—Ç–æ—Ä–∏–∏'])
def handle_buttons(message):
    if message.text == 'üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é':
        msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é:")
        bot.register_next_step_handler(msg, save_story)
    elif message.text == 'üìñ –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏':
        show_stories(message)
    else:
        show_my_stories(message)

def save_story(message):
    data = load_data()
    story = {
        'id': len(data['stories']) + 1,
        'user_id': message.from_user.id,
        'username': message.from_user.username or message.from_user.first_name,
        'text': message.text,
        'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'rating': 0,
        'votes': 0
    }
    data['stories'].append(story)
    save_data(data)
    bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=create_menu())

def show_stories(message):
    data = load_data()
    if not data['stories']:
        bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    for story in data['stories'][-5:][::-1]:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üëç", callback_data=f"rate_{story['id']}_1"),
                   InlineKeyboardButton("üëé", callback_data=f"rate_{story['id']}_-1"))
        bot.send_message(message.chat.id, f"@{story['username']}:\n{story['text']}\n–†–µ–π—Ç–∏–Ω–≥: {story['rating']}", reply_markup=markup)

def show_my_stories(message):
    data = load_data()
    stories = [s for s in data['stories'] if s['user_id'] == message.from_user.id]
    if not stories:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–π.")
        return
    for story in stories:
        bot.send_message(message.chat.id, f"{story['date']}:\n{story['text']}\n–†–µ–π—Ç–∏–Ω–≥: {story['rating']}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('rate_'))
def rate(call):
    data = load_data()
    user_id, story_id, rating = call.from_user.id, int(call.data.split('_')[1]), int(call.data.split('_')[2])
    if f"{user_id}_{story_id}" in data['ratings']:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!")
        return
    for story in data['stories']:
        if story['id'] == story_id:
            story['rating'] += rating
            story['votes'] += 1
            data['ratings'][f"{user_id}_{story_id}"] = rating
            save_data(data)
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("üëç", callback_data=f"rate_{story['id']}_1"),
                       InlineKeyboardButton("üëé", callback_data=f"rate_{story['id']}_-1"))
            bot.edit_message_text(f"@{story['username']}:\n{story['text']}\n–†–µ–π—Ç–∏–Ω–≥: {story['rating']}",
                                call.message.chat.id, call.message.message_id, reply_markup=markup)
            break

def create_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é', 'üìñ –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏')
    markup.row('‚≠ê –ú–æ–∏ –∏—Å—Ç–æ—Ä–∏–∏')
    return markup

if __name__ == '__main__':
    bot.polling()
